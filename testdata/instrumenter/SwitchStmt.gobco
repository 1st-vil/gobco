package instrumenter

// https://go.dev/ref/spec#Switch_statements

// TODO: Add systematic tests.

// switchStmt covers the instrumentation of [ast.SwitchStmt], which has the
// expression field Tag, plus several implicit comparisons.
func switchStmt(expr int, cond bool, s string) {

	// In switch statements without tag, the tag is implicitly 'true',
	// therefore all expressions in the case clauses must have type bool,
	// therefore they are instrumented.
	switch {
	case gobcoCover(0, expr == 5):
	case gobcoCover(1, cond):
	}

	// No initialization, the tag is a plain identifier.
	// The instrumented code could directly compare the tag with the
	// expressions from the case clauses.
	// It doesn't do so, to keep the instrumenting code simple.
	{
		gobco0 := s
		switch {
		case gobcoCover(2, gobco0 == "one"),
			gobcoCover(3, gobco0 == "two"),
			gobcoCover(4, gobco0 == "three"):
		}
	}

	// In switch statements with a tag expression, the expression is
	// evaluated exactly once and then compared to each expression from
	// the case clauses.
	{
		gobco1 := s + "suffix"
		switch {
		case gobcoCover(5, gobco1 == "one"),
			gobcoCover(6, gobco1 == "two"),
			gobcoCover(7, gobco1 == ""+s):
		}
	}

	// In a switch statement with an init assignment, the init statement
	// happens before evaluating the tag expression.
	{
		s = "prefix" + s
		gobco2 := s + "suffix"
		switch {
		case gobcoCover(8, gobco2 == "prefix.a.suffix"):
		}
	}

	// In a switch statement with an init variable definition, the
	// variable is defined in a separate scope, and the initialization
	// statement happens before evaluating the tag expression.
	{
		s := "prefix" + s
		gobco3 := s + "suffix"
		switch {
		case gobcoCover(9, gobco3 == "prefix.a.suffix"):
		}
	}

	// No matter whether there is an init statement or not, if the tag
	// expression is empty, the comparisons use the simple form and are not
	// compared to an explicit "true".
	switch s := "prefix" + s; {
	case gobcoCover(10, s == "one"):
	case gobcoCover(11, cond):
	}

	// The statements from the initialization are simply copied, there is no
	// need to handle assignments of multi-valued function calls differently.
	{
		a, b := (func() (string, string) { return "a", "b" })()
		gobco4 := cond
		switch {
		case gobcoCover(12, gobco4 == true):
			a += b
			b += a
		}
	}

	// Switch statements that contain a tag expression and an
	// initialization statement are wrapped in an outer block.
	// In this case, the block would not be necessary since the
	// gobco variable name does not clash with the code that is
	// instrumented.
	ch := make(chan<- int, 1)
	{
		ch <- 3
		gobco5 := expr
		switch {
		case gobcoCover(13, gobco5 == 5):
		}
	}

	// In the case clauses, there may be complex conditions.
	// In the case of '!a', the condition 'a' is already instrumented,
	// so instrumenting '!a' seems redundant at first.
	// The crucial point is that it's not the value of 'a' alone that
	// decides which branch is taken, but instead 'cond == a'.
	{
		a, b := cond, !gobcoCover(14, cond)
		gobco6 := cond
		switch {
		case gobcoCover(15, gobco6 == a):
		case gobcoCover(16, gobco6 == !gobcoCover(17, a)):
		case gobcoCover(18, gobco6 == (!gobcoCover(19, a))):
		case gobcoCover(20, gobco6 == (gobcoCover(21, a) && gobcoCover(22, b))):
		case gobcoCover(23, gobco6 == (gobcoCover(24, a) && !gobcoCover(25, b))):
		case gobcoCover(26, gobco6 == (gobcoCover(27, a) || gobcoCover(28, b))):
		case gobcoCover(29, gobco6 == (!gobcoCover(30, a) || gobcoCover(31, b))):
		case gobcoCover(32, gobco6 == (a == b)):
		case gobcoCover(33, gobco6 == (a != b)):
		}
	}

	// In a switch statement, the tag expression may be unused.
	{
		gobco7 := gobcoCover(34, 1 > 0)
		_ = gobco7
		switch {
		}
	}

	// In a switch statement without tag expression, ensure that complex
	// conditions in the case clauses are not instrumented redundantly.
	switch a, b := cond, !gobcoCover(35, cond); {
	case (gobcoCover(36, a) && gobcoCover(37, b)):
	case (gobcoCover(38, a) || gobcoCover(39, b)):
	}
}

// :15:7: "expr == 5"
// :16:7: "cond"
// :24:7: "s == \"one\""
// :25:3: "s == \"two\""
// :26:3: "s == \"three\""
// :33:7: "s + \"suffix\" == \"one\""
// :34:3: "s + \"suffix\" == \"two\""
// :35:3: "s + \"suffix\" == \"\" + s"
// :41:7: "s + \"suffix\" == \"prefix.a.suffix\""
// :48:7: "s + \"suffix\" == \"prefix.a.suffix\""
// :55:7: "s == \"one\""
// :56:7: "cond"
// :62:7: "cond == true"
// :74:7: "expr == 5"
// :82:24: "cond"
// :83:7: "cond == a"
// :84:7: "cond == !a"
// :84:8: "a"
// :85:7: "cond == (!a)"
// :85:9: "a"
// :86:7: "cond == (a && b)"
// :86:7: "a"
// :86:12: "b"
// :87:7: "cond == (a && !b)"
// :87:7: "a"
// :87:13: "b"
// :88:7: "cond == (a || b)"
// :88:7: "a"
// :88:12: "b"
// :89:7: "cond == (!a || b)"
// :89:8: "a"
// :89:13: "b"
// :90:7: "cond == (a == b)"
// :91:7: "cond == (a != b)"
// :95:9: "1 > 0"
// :100:24: "cond"
// :101:8: "a"
// :101:13: "b"
// :102:8: "a"
// :102:13: "b"
