package instrumenter

import "fmt"

// https://go.dev/ref/spec#If_statements

// ifStmt covers the instrumentation of [ast.IfStmt], which has the expression
// field Cond.
//
// In condition coverage mode, the Cond field of an if statement is
// instrumented.
func ifStmt(i int, s string, cond bool) string {

	if GobcoCover(0, i > 0) && GobcoCover(1, s == "positive") {
		return "yes, positive"
	}

	if GobcoCover(2, len(s) > 5) {
		if GobcoCover(3, len(s) > 10) {
			return "long string"
		} else {
			return "medium string"
		}
	}

	// The condition from an if statement is always a boolean expression.
	// And even if the condition is a simple variable, it is wrapped.
	// This is different from arguments to function calls, where simple
	// variables are not wrapped.
	if GobcoCover(4, cond) {
		return "cond is true"
	}

	// An if statement, like a switch statement, can have an initializer
	// statement. Other than in a switch statement, the condition in an if
	// statement is used exactly once, in the same place as before the
	// instrumentation, so there is no need to introduce a new
	// variable. Therefore, no complicated rewriting is needed.

	if i++; GobcoCover(5, cond) {
		return fmt.Sprint("incremented ", GobcoCover(6, i > 5))
	}

	if i := i + 1; GobcoCover(7, cond) {
		return fmt.Sprint("added 1, now ", GobcoCover(8, i > 6))
	}

	// Conditions in the initializer are instrumented as well.
	if cond := GobcoCover(9, i > 7); GobcoCover(10, cond) {
		return fmt.Sprint("condition in initializer ", GobcoCover(11, i > 8))
	}

	if GobcoCover(12, i < 21) {
		i += 31
	} else if GobcoCover(13, i < 22) {
		i += 32
	} else {
		i += 33
	}

	return "other"
}

// :14:5: "i > 0"
// :14:14: "s == \"positive\""
// :18:5: "len(s) > 5"
// :19:6: "len(s) > 10"
// :30:5: "cond"
// :40:10: "cond"
// :41:37: "i > 5"
// :44:17: "cond"
// :45:38: "i > 6"
// :49:13: "i > 7"
// :49:20: "cond"
// :50:50: "i > 8"
// :53:5: "i < 21"
// :55:12: "i < 22"
