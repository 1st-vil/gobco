package instrumenter

// https://go.dev/ref/spec#If_statements

// ifStmt covers the instrumentation of [ast.IfStmt], which has the expression
// field Cond.
func ifStmt(i int, s string, cond bool) bool {

	if GobcoCover(0, i > 0) && GobcoCover(1, s == "positive") {
		return true
	}

	if GobcoCover(2, len(s) > 5) {
		return GobcoCover(3, len(s) > 10)
	}

	// The condition from an if statement is always a boolean expression.
	// And even if the condition is a simple variable, it is wrapped.
	// This is different from arguments to function calls, where simple
	// variables are not wrapped.
	if GobcoCover(4, cond) {
		return true
	}

	// An if statement, like a switch statement, can have an initializer
	// statement. Other than in a switch statement, the condition in an if
	// statement is used exactly once, so there is no need to introduce a new
	// variable. Therefore, no complicated rewriting is needed.

	if i++; GobcoCover(5, cond) {
		return GobcoCover(6, i > 5)
	}

	if i := i + 1; GobcoCover(7, cond) {
		return GobcoCover(8, i > 6)
	}

	// Conditions in the initializer are instrumented as well.
	// TODO: Instrument the initialization before the condition.
	if cond := GobcoCover(9, i > 7); GobcoCover(10, cond) {
		return GobcoCover(11, i > 8)
	}

	if GobcoCover(12, i < 21) {
		i += 31
	} else if GobcoCover(13, i < 22) {
		i += 32
	} else {
		i += 33
	}

	return false
}

// :9:5: "i > 0"
// :9:14: "s == \"positive\""
// :13:5: "len(s) > 5"
// :14:10: "len(s) > 10"
// :21:5: "cond"
// :30:10: "cond"
// :31:10: "i > 5"
// :34:17: "cond"
// :35:10: "i > 6"
// :40:13: "i > 7"
// :40:20: "cond"
// :41:10: "i > 8"
// :44:5: "i < 21"
// :46:12: "i < 22"
