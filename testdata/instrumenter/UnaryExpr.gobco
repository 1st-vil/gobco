package instrumenter

// https://go.dev/ref/spec#Operators

// TODO: Add systematic tests.

// unaryExpr covers the instrumentation of [ast.UnaryExpr], which has the
// expression field X.
func unaryExpr(a, b, c bool, i int) {
	// To avoid double negation, only the innermost expression of a
	// negation is instrumented.
	//
	// Note: The operands of the && are in the "wrong" order because of the
	// order in which the AST nodes are visited. First the two direct
	// operands of the && expression, then each operand further down.
	_ = !!!gobcoCover(0, a)
	_ = !gobcoCover(1, b) && gobcoCover(2, c)

	if gobcoCover(3, -i > 0) {
	}

	// In double negations, only the terminal condition is wrapped.
	_ = !(!gobcoCover(4, a))
}

// :16:9: "a"
// :17:7: "b"
// :17:12: "c"
// :19:5: "-i > 0"
// :23:9: "a"
