package instrumenter

import (
	"reflect"
)

func typeSwitchStmt(tag interface{}) string {
	switch interface {
	}(0).(type) {
	default:
		gobco0 := tag
		_ = gobco0
		switch {
		}
	}
	switch interface {
	}(0).(type) {
	default:
		gobco1 := tag
		_ = gobco1
		switch {
		default:
			v := gobco1
			_ = v

			_ = v
		}
	}
	switch tag := tag; interface {
	}(0).(type) {
	default:
		gobco2 := tag
		_ = gobco2
		switch {
		default:
			tag := gobco2
			_ = tag

			_ = tag
		}
	}
	switch interface {
	}(0).(type) {
	default:
		gobco3 := tag
		_ = gobco3
		_, gobco4 := gobco3.((int))
		switch {
		case gobcoCover(0, gobco4):

			return "parenthesized " + reflect.TypeOf(tag).Name()
		}
	}
	switch interface {
	}(0).(type) {
	default:
		gobco5 := tag
		_ = gobco5
		gobco6 := gobco5 == nil
		switch {
		case gobcoCover(1, gobco6):

			return "nil"
		}
	}
	switch interface {
	}(0).(type) {
	default:
		gobco7 := tag
		_ = gobco7
		_, gobco8 := gobco7.(uint)
		_, gobco9 := gobco7.(uint8)
		_, gobco10 := gobco7.(uint16)
		gobco11 := gobco7 == nil
		switch {
		case gobcoCover(2, gobco8):
			v := gobco7.(uint)
			_ = v
			_ = v + uint(0)
			return "uint " + reflect.TypeOf(v).Name()
		case gobcoCover(3, gobco9), gobcoCover(4, gobco10):
			v := gobco7
			_ = v

			return "any " + reflect.TypeOf(v).Name()
		case gobcoCover(5, gobco11):
			v := gobco7
			_ = v

			return "nil " + reflect.TypeOf(v).Name()
		}
	}

	return "end"
}

func typeSwitchStmtScopes(value interface{}) string {
	switch _ = gobcoCover(12, 123 > 0); interface {
	}(0).(type) {
	default:
		gobco12 := value
		_ = gobco12
		_, gobco13 := gobco12.(int)
		_, gobco14 := gobco12.(uint)
		_, gobco15 := gobco12.(string)
		_, gobco16 := gobco12.(struct{})
		_, gobco17 := gobco12.(uint8)
		gobco18 := gobco12 == nil
		switch {
		case gobcoCover(6, gobco13), gobcoCover(7, gobco14):
			v := gobco12
			_ = v

			return "integer " + reflect.TypeOf(v).String()
		case gobcoCover(8, gobco15):
			v := gobco12.(string)
			_ = v

			return "string " + reflect.TypeOf(v).String()
		case gobcoCover(9, gobco16):
			v := gobco12
			_ = v

			return "struct{} " + reflect.TypeOf(v).String()
		case gobcoCover(10, gobco17):
			v := gobco12.(uint8)
			_ = v

			return "byte"
		case gobcoCover(11, gobco18):
			v := gobco12
			_ = v

			return "nil"
		default:
			v := gobco12
			_ = v

			return "other " + reflect.TypeOf(v).String()
		}
	}

}

func typeSwitchStmtScopesInstrumented(value interface{}) string {
	switch _ = gobcoCover(13, 123 > 0); interface {
	}(0).(type) {
	default:
		gobco19 := interface{}(0)
		_ = gobco19
		switch {
		default:

			tmp0 := value
			_, tmp1 := tmp0.(int)
			_, tmp2 := tmp0.(uint)
			_, tmp3 := tmp0.(string)
			_, tmp4 := tmp0.(struct{})
			_, tmp5 := tmp0.(uint8)
			tmp6 := gobcoCover(14, tmp0 == nil)

			switch {

			case gobcoCover(15, tmp1), gobcoCover(16, tmp2):
				v := tmp0
				_ = v
				return "integer " + reflect.TypeOf(v).String()

			case gobcoCover(17, tmp3):
				v := tmp0.(string)
				_ = v
				return "string " + reflect.TypeOf(v).String()

			case gobcoCover(18, tmp4):
				v := tmp0.(struct{})
				_ = v
				return "struct{} " + reflect.TypeOf(v).String()

			case gobcoCover(19, tmp5):
				v := tmp0.(uint8)
				_ = v
				return "byte"

			case gobcoCover(20, tmp6):
				v := tmp0
				_ = v
				return "nil"

			default:
				v := tmp0
				return "other " + reflect.TypeOf(v).String()
			}
		}
	}

}

// :38:9: "tag.(type) == (int)"
// :43:9: "tag.(type) == nil"
// :51:14: "tag.(type) == uint"
// :51:14: "tag.(type) == uint8"
// :51:14: "tag.(type) == uint16"
// :51:14: "tag.(type) == nil"
// :73:27: "value.(type) == int"
// :73:27: "value.(type) == uint"
// :73:27: "value.(type) == string"
// :73:27: "value.(type) == (struct{})"
// :73:27: "value.(type) == uint8"
// :73:27: "value.(type) == nil"
// :73:13: "123 > 0"
// :114:13: "123 > 0"
// :122:11: "tmp0 == nil"
// :126:8: "tmp1"
// :126:14: "tmp2"
// :131:8: "tmp3"
// :136:8: "tmp4"
// :141:8: "tmp5"
// :146:8: "tmp6"
