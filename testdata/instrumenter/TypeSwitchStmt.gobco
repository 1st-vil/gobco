package instrumenter

import (
	"reflect"
)

func typeSwitchStmt(tag interface{}, value interface{}) string {

	switch interface {
	}(0).(type) {
	default:
		gobco0 := tag
		_ = gobco0
		switch {
		}
	}

	switch interface {
	}(0).(type) {
	default:
		gobco1 := tag
		_ = gobco1
		switch {
		default:
			v := gobco1
			_ = v

			_ = v
		}
	}

	switch tag := tag; interface {
	}(0).(type) {
	default:
		gobco2 := tag
		_ = gobco2
		switch {
		default:
			tag := gobco2
			_ = tag

			_ = tag
		}
	}

	switch interface {
	}(0).(type) {
	default:
		gobco3 := tag
		_ = gobco3
		_, gobco4 := gobco3.((int))
		switch {
		case gobcoCover(0, gobco4):
			return "parenthesized " + reflect.TypeOf(tag).Name()
		}
	}

	switch interface {
	}(0).(type) {
	default:
		gobco5 := tag
		_ = gobco5
		gobco6 := gobco5 == nil
		switch {
		case gobcoCover(1, gobco6):
			return "nil"
		}
	}

	switch interface {
	}(0).(type) {
	default:
		gobco7 := tag
		_ = gobco7
		_, gobco8 := gobco7.(uint)
		_, gobco9 := gobco7.(uint8)
		_, gobco10 := gobco7.(uint16)
		gobco11 := gobco7 == nil
		switch {
		case gobcoCover(2, gobco8):
			v := gobco7.(uint)
			_ = v
			_ = v + uint(0)
			return "uint " + reflect.TypeOf(v).Name()
		case gobcoCover(3, gobco9), gobcoCover(4, gobco10):
			v := gobco7
			_ = v
			return "any " + reflect.TypeOf(v).Name()
		case gobcoCover(5, gobco11):
			v := gobco7
			_ = v

			return "nil " + reflect.TypeOf(v).Name()
		}
	}

	switch _ = gobcoCover(12, 123 > 0); interface {
	}(0).(type) {
	default:
		gobco12 := value
		_ = gobco12
		_, gobco13 := gobco12.(int)
		_, gobco14 := gobco12.(uint)
		_, gobco15 := gobco12.(string)
		_, gobco16 := gobco12.(struct{})
		_, gobco17 := gobco12.(uint8)
		gobco18 := gobco12 == nil
		switch {
		case gobcoCover(6, gobco13), gobcoCover(7, gobco14):
			v := gobco12
			_ = v

			return "integer " + reflect.TypeOf(v).String()
		case gobcoCover(8, gobco15):
			v := gobco12.(string)
			_ = v

			return "string " + reflect.TypeOf(v).String()
		case gobcoCover(9, gobco16):
			v := gobco12.(struct{})
			_ = v
			return "struct{} " + reflect.TypeOf(v).String()
		case gobcoCover(10, gobco17):
			v := gobco12.(uint8)
			_ = v

			return "byte"
		case gobcoCover(11, gobco18):
			v := gobco12
			_ = v
			return "nil"
		default:
			v := gobco12
			_ = v

			return "other " + reflect.TypeOf(v).String()
		}
	}

}

// :39:7: "tag.(type) == (int)"
// :44:7: "tag.(type) == nil"
// :52:7: "tag.(type) == uint"
// :55:7: "tag.(type) == uint8"
// :55:14: "tag.(type) == uint16"
// :57:7: "tag.(type) == nil"
// :66:7: "value.(type) == int"
// :66:12: "value.(type) == uint"
// :71:7: "value.(type) == string"
// :76:7: "value.(type) == (struct{})"
// :79:7: "value.(type) == uint8"
// :83:7: "value.(type) == nil"
// :64:13: "123 > 0"
