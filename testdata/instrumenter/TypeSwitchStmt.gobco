package instrumenter

import (
	"reflect"
)

func typeSwitchStmt() {
}

func typeSwitchStmtScopes(value interface{}) string {

	switch v := value.(type) {

	case int, uint:

		return "integer " + reflect.TypeOf(v).String()

	case string:

		return "string " + reflect.TypeOf(v).String()

	case struct{}:
		return "struct{} " + reflect.TypeOf(v).String()

	case uint8:

		return "byte"

	case nil:
		return "nil"

	default:
		return "other " + reflect.TypeOf(v).String()
	}
}

func typeSwitchStmtScopesInstrumented(value interface{}) string {

	switch tmp0 := value; {

	case gobcoCover(0, func() bool { _, ok := tmp0.(int); return ok }()),
		gobcoCover(1, func() bool { _, ok := tmp0.(uint); return ok }()):
		v := tmp0
		_ = v
		return "integer " + reflect.TypeOf(v).String()

	case gobcoCover(2, func() bool { _, ok := tmp0.(string); return ok }()):
		v := tmp0.(string)
		_ = v
		return "string " + reflect.TypeOf(v).String()

	case gobcoCover(3, func() bool { _, ok := tmp0.(struct{}); return ok }()):
		v := tmp0.(struct{})
		_ = v
		return "struct{} " + reflect.TypeOf(v).String()

	case gobcoCover(4, func() bool { _, ok := tmp0.(uint8); return ok }()):
		v := tmp0.(uint8)
		_ = v
		return "byte"

	case gobcoCover(5, tmp0 == nil):
		return "nil"

	default:
		v := tmp0
		return "other " + reflect.TypeOf(v).String()
	}
}

// :69:7: "func() bool { _, ok := tmp0.(int); return ok }()"
// :70:3: "func() bool { _, ok := tmp0.(uint); return ok }()"
// :75:7: "func() bool { _, ok := tmp0.(string); return ok }()"
// :80:7: "func() bool { _, ok := tmp0.(struct{}); return ok }()"
// :85:7: "func() bool { _, ok := tmp0.(uint8); return ok }()"
// :90:7: "tmp0 == nil"
