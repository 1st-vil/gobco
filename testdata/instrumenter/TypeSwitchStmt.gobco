package instrumenter

import (
	"reflect"
)

func typeSwitchStmt(tag interface{}) string {

	switch tag.(type) {
	}

	switch v := tag.(type) {
	default:
		_ = v
	}

	switch tag := tag; tag := tag.(type) {
	default:
		_ = tag
	}

	switch tag.(type) {
	case (int):
		return "parenthesized " + reflect.TypeOf(tag).Name()
	}

	switch tag.(type) {
	case nil:
		return "nil"
	}

	switch v := tag.(type) {
	case uint:
		return "uint " + reflect.TypeOf(v).Name()
	case uint8, uint16:
		return "any " + reflect.TypeOf(v).Name()
	case nil:

		return "nil " + reflect.TypeOf(v).Name()
	}

	return "end"
}

func typeSwitchStmtScopes(value interface{}) string {

	switch _ = gobcoCover(0, 123 > 0); v := value.(type) {

	case int, uint:

		return "integer " + reflect.TypeOf(v).String()

	case string:

		return "string " + reflect.TypeOf(v).String()

	case struct{}:
		return "struct{} " + reflect.TypeOf(v).String()

	case uint8:

		return "byte"

	case nil:
		return "nil"

	default:
		return "other " + reflect.TypeOf(v).String()
	}
}

func typeSwitchStmtScopesInstrumented(value interface{}) string {

	switch _ = gobcoCover(1, 123 > 0); interface{}(0).(type) {
	default:
		tmp0 := value
		_, tmp1 := tmp0.(int)
		_, tmp2 := tmp0.(uint)
		_, tmp3 := tmp0.(string)
		_, tmp4 := tmp0.(struct{})
		_, tmp5 := tmp0.(uint8)
		tmp6 := gobcoCover(2, tmp0 == nil)

		switch {

		case gobcoCover(3, tmp1), gobcoCover(4, tmp2):
			v := tmp0
			_ = v
			return "integer " + reflect.TypeOf(v).String()

		case gobcoCover(5, tmp3):
			v := tmp0.(string)
			_ = v
			return "string " + reflect.TypeOf(v).String()

		case gobcoCover(6, tmp4):
			v := tmp0.(struct{})
			_ = v
			return "struct{} " + reflect.TypeOf(v).String()

		case gobcoCover(7, tmp5):
			v := tmp0.(uint8)
			_ = v
			return "byte"

		case gobcoCover(8, tmp6):
			v := tmp0
			_ = v
			return "nil"

		default:
			v := tmp0
			return "other " + reflect.TypeOf(v).String()
		}
	}
}

// :72:13: "123 > 0"
// :113:13: "123 > 0"
// :121:11: "tmp0 == nil"
// :125:8: "tmp1"
// :125:14: "tmp2"
// :130:8: "tmp3"
// :135:8: "tmp4"
// :140:8: "tmp5"
// :145:8: "tmp6"
