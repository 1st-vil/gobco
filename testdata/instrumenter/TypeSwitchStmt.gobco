package instrumenter

import (
	"reflect"
)

// https://go.dev/ref/spec#Type_switches

// typeSwitchStmt covers the instrumentation of [ast.TypeSwitchStmt], which
// has no expression fields.
//
// A type switch statement contains implicit comparisons that need to be
// instrumented.
func typeSwitchStmt(tag interface{}, value interface{}) string {

	// An empty type switch statement doesn't need to be instrumented.
	switch tag.(type) {
	}

	// The type switch guard can be a simple expression.
	{
		_ = tag
		switch {
		default:
		}
	}

	// The type switch guard can be a short variable declaration for a
	// single variable, in which case each branch gets its own declared
	// variable, with the proper type.
	{
		gobco1 := tag
		switch {
		default:
			v := gobco1
			_ = v

			_ = v
		}
	}

	// A type switch statement may have an initialization statement that is
	// evaluated in a nested scope. The type switch tag can be a short
	// variable definition, which has another, nested scope, in each of the
	// case clauses.
	switch tag := tag; {
	default:
		gobco2 := tag
		switch {
		default:
			tag := gobco2
			_ = tag

			_ = tag
		}
	}

	// Type expressions may be parenthesized:
	{
		gobco3 := tag
		_, gobco4 := gobco3.((int))
		switch {
		case GobcoCover(0, gobco4):
			return "parenthesized " + reflect.TypeOf(tag).Name()
		}
	}

	// Nil may be parenthesized:
	{
		gobco5 := tag
		gobco6 := gobco5 == nil
		switch {
		case GobcoCover(1, gobco6):
			return "parenthesized nil"
		}
	}

	// In case clauses with a single type, the variable has that type.
	// In all other cases, the variable has the type of the guard expression.
	// The type identifier 'nil' matches a nil interface value.
	{
		gobco7 := tag
		_, gobco8 := gobco7.(uint)
		_, gobco9 := gobco7.(uint8)
		_, gobco10 := gobco7.(uint16)
		gobco11 := gobco7 == nil
		switch {
		case GobcoCover(2, gobco8):
			v := gobco7.(uint)
			_ = v

			_ = v + uint(0)
			return "uint " + reflect.TypeOf(v).Name()
		case GobcoCover(3, gobco9), GobcoCover(4, gobco10):
			v := gobco7
			_ = v

			return "any " + reflect.TypeOf(v).Name()
		case GobcoCover(5, gobco11):
			v := gobco7
			_ = v

			// unreachable
			return "nil " + reflect.TypeOf(v).Name()
		}
	}

	// TODO: Test type parameters and generic types.

	switch _ = GobcoCover(14, 123 > 0); {
	default:
		gobco12 := value
		_, gobco13 := gobco12.(int)
		_, gobco14 := gobco12.(uint)
		_, gobco15 := gobco12.(string)
		_, gobco16 := gobco12.(struct{})
		_, gobco17 := gobco12.(uint8)
		gobco18 := gobco12 == nil
		switch {

		case GobcoCover(6, gobco13), GobcoCover(7, gobco14):
			v := gobco12
			_ = v

			// In a clause that lists multiple types, the expression 'v' has the
			// type of the switch tag, in this case 'interface{}'.
			return "integer " + reflect.TypeOf(v).String()

		case GobcoCover(8, gobco15):
			v := gobco12.(string)
			_ = v

			// In a clause that lists a single type, the expression 'v' has the
			// type from the case clause.
			return "string " + reflect.TypeOf(v).String()

		case GobcoCover(9, gobco16):
			v := gobco12.(struct{})
			_ = v

			return "struct{} " + reflect.TypeOf(v).String()

		case GobcoCover(10, gobco17):
			v := gobco12.(uint8)
			_ = v

			// The variable 'v' may be unused in some of the case clauses.
			return "byte"

		case GobcoCover(11, gobco18):
			v := gobco12
			_ = v

			return "nil"

		default:
			v := gobco12
			_ = v

			return "other " + reflect.TypeOf(v).String()
		}
	}

}

func typeSwitchStmtMixed(value interface{}) {
	// XXX: The instrumentation does not happen strictly in
	//  declaration order:
	//  All types from the TypeSwitchStmt are instrumented
	//  in a first pass.
	//  All other expressions are instrumented in a second pass.
	{
		gobco0 := value
		_, gobco1 := gobco0.(int)
		_, gobco2 := gobco0.(uint)
		switch {
		case GobcoCover(12, gobco1):
			_ = GobcoCover(15, true) && GobcoCover(16, false)
		case GobcoCover(13, gobco2):
			_ = GobcoCover(17, false) || GobcoCover(18, true)
		}
	}

}

// :44:7: "tag.(type) == (int)"
// :50:7: "tag.(type) == (nil)"
// :58:7: "tag.(type) == uint"
// :61:7: "tag.(type) == uint8"
// :61:14: "tag.(type) == uint16"
// :63:7: "tag.(type) == nil"
// :72:7: "value.(type) == int"
// :72:12: "value.(type) == uint"
// :77:7: "value.(type) == string"
// :82:7: "value.(type) == (struct{})"
// :85:7: "value.(type) == uint8"
// :89:7: "value.(type) == nil"
// :104:7: "value.(type) == int"
// :106:7: "value.(type) == uint"
// :70:13: "123 > 0"
// :105:7: "true"
// :105:15: "false"
// :107:7: "false"
// :107:16: "true"
