package instrumenter

import (
	"reflect"
)

func typeSwitchStmt(tag interface{}) string {
	switch interface {
	}(0).(type) {
	default:
		gobco0 := tag
		_ = gobco0
		switch {
		}
	}
	switch interface {
	}(0).(type) {
	default:
		v := tag
		_ = v
		switch {
		default:

			_ = v
		}
	}
	switch tag := tag; interface {
	}(0).(type) {
	default:
		tag := tag
		_ = tag
		switch {
		default:

			_ = tag
		}
	}
	switch interface {
	}(0).(type) {
	default:
		gobco1 := tag
		_ = gobco1
		_, gobco2 := gobco1.((int))
		switch {
		case gobcoCover(0, gobco2):

			return "parenthesized " + reflect.TypeOf(tag).Name()
		}
	}
	switch interface {
	}(0).(type) {
	default:
		gobco3 := tag
		_ = gobco3
		gobco4 := gobco3 == nil
		switch {
		case gobcoCover(1, gobco4):

			return "nil"
		}
	}
	switch interface {
	}(0).(type) {
	default:
		v := tag
		_ = v
		_, gobco5 := v.(uint)
		_, gobco6 := v.(uint8)
		_, gobco7 := v.(uint16)
		gobco8 := v == nil
		switch {
		case gobcoCover(2, gobco5):

			return "uint " + reflect.TypeOf(v).Name()
		case gobcoCover(3, gobco6), gobcoCover(4, gobco7):

			return "any " + reflect.TypeOf(v).Name()
		case gobcoCover(5, gobco8):

			return "nil " + reflect.TypeOf(v).Name()
		}
	}

	return "end"
}

func typeSwitchStmtScopes(value interface{}) string {
	switch _ = gobcoCover(12, 123 > 0); interface {
	}(0).(type) {
	default:
		v := value
		_ = v
		_, gobco9 := v.(int)
		_, gobco10 := v.(uint)
		_, gobco11 := v.(string)
		_, gobco12 := v.(struct{})
		_, gobco13 := v.(uint8)
		gobco14 := v == nil
		switch {
		case gobcoCover(6, gobco9), gobcoCover(7, gobco10):

			return "integer " + reflect.TypeOf(v).String()
		case gobcoCover(8, gobco11):

			return "string " + reflect.TypeOf(v).String()
		case gobcoCover(9, gobco12):

			return "struct{} " + reflect.TypeOf(v).String()
		case gobcoCover(10, gobco13):

			return "byte"
		case gobcoCover(11, gobco14):

			return "nil"
		default:

			return "other " + reflect.TypeOf(v).String()
		}
	}

}

func typeSwitchStmtScopesInstrumented(value interface{}) string {
	switch _ = gobcoCover(13, 123 > 0); interface {
	}(0).(type) {
	default:
		gobco15 := interface{}(0)
		_ = gobco15
		switch {
		default:

			tmp0 := value
			_, tmp1 := tmp0.(int)
			_, tmp2 := tmp0.(uint)
			_, tmp3 := tmp0.(string)
			_, tmp4 := tmp0.(struct{})
			_, tmp5 := tmp0.(uint8)
			tmp6 := gobcoCover(14, tmp0 == nil)

			switch {

			case gobcoCover(15, tmp1), gobcoCover(16, tmp2):
				v := tmp0
				_ = v
				return "integer " + reflect.TypeOf(v).String()

			case gobcoCover(17, tmp3):
				v := tmp0.(string)
				_ = v
				return "string " + reflect.TypeOf(v).String()

			case gobcoCover(18, tmp4):
				v := tmp0.(struct{})
				_ = v
				return "struct{} " + reflect.TypeOf(v).String()

			case gobcoCover(19, tmp5):
				v := tmp0.(uint8)
				_ = v
				return "byte"

			case gobcoCover(20, tmp6):
				v := tmp0
				_ = v
				return "nil"

			default:
				v := tmp0
				return "other " + reflect.TypeOf(v).String()
			}
		}
	}

}

// :38:9: "tag.(type) == (int)"
// :43:9: "tag.(type) == nil"
// :51:14: "tag.(type) == uint"
// :51:14: "tag.(type) == uint8"
// :51:14: "tag.(type) == uint16"
// :51:14: "tag.(type) == nil"
// :72:27: "value.(type) == int"
// :72:27: "value.(type) == uint"
// :72:27: "value.(type) == string"
// :72:27: "value.(type) == (struct{})"
// :72:27: "value.(type) == uint8"
// :72:27: "value.(type) == nil"
// :72:13: "123 > 0"
// :113:13: "123 > 0"
// :121:11: "tmp0 == nil"
// :125:8: "tmp1"
// :125:14: "tmp2"
// :130:8: "tmp3"
// :135:8: "tmp4"
// :140:8: "tmp5"
// :145:8: "tmp6"
